"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputFile = exports.inputFileData = exports.baseFetchConfig = exports.streamFile = exports.itrToStream = exports.debug = void 0;
const https_1 = require("https");
const path_1 = require("path");
const stream_1 = require("stream");
// === Export all API types
__exportStar(require("@grammyjs/types"), exports);
// === Export debug
var debug_1 = require("debug");
Object.defineProperty(exports, "debug", { enumerable: true, get: function () { return debug_1.debug; } });
// === Export system-specific operations
// Turn an AsyncIterable<Uint8Array> into a stream
const itrToStream = (itr) => stream_1.Readable.from(itr, { objectMode: false });
exports.itrToStream = itrToStream;
// Turn a file path into an AsyncIterable<Uint8Array>
var fs_1 = require("fs");
Object.defineProperty(exports, "streamFile", { enumerable: true, get: function () { return fs_1.createReadStream; } });
// === Base configuration for `fetch` calls
exports.baseFetchConfig = {
    compress: true,
    agent: new https_1.Agent({ keepAlive: true }),
};
// === InputFile handling and File augmenting
// Accessor for file data in `InputFile` instances
exports.inputFileData = Symbol("InputFile data");
/**
 * An `InputFile` wraps a number of different sources for [sending
 * files](https://grammy.dev/guide/files.html#uploading-your-own-file).
 *
 * It corresponds to the `InputFile` type in the [Telegram Bot API
 * Reference](https://core.telegram.org/bots/api#inputfile).
 */
class InputFile {
    /**
     * Constructs an `InputFile` that can be used in the API to send files.
     *
     * @param file A path to a local file or a `Buffer` or a `fs.ReadStream` that specifies the file data
     * @param filename Optional name of the file
     */
    constructor(file, filename) {
        Object.defineProperty(this, _a, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Optional name of the constructed `InputFile` instance.
         *
         * Check out the
         * [documenation](https://grammy.dev/guide/files.html#uploading-your-own-file)
         * on sending files with `InputFile`.
         */
        Object.defineProperty(this, "filename", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this[exports.inputFileData] = file;
        if (filename === undefined && typeof file === "string") {
            filename = (0, path_1.basename)(file);
        }
        this.filename = filename;
    }
}
exports.InputFile = InputFile;
_a = exports.inputFileData;
